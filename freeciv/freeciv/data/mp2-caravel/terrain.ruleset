
; Modifying this file:
; You should not modify this file except to make bugfixes or
; for other "maintenance".  If you want to make custom changes,
; you should create a new datadir subdirectory and copy this file
; into that directory, and then modify that copy.  Then use the
; command "rulesetdir <mysubdir>" in the server to have freeciv
; use your new customized file.

; Note that the freeciv AI may not cope well with anything more
; than minor changes.

[datafile]
description="Terrain data for Freeciv"
options="+Freeciv-ruleset-Devel-2017.Jan.02 web-compatible"
format_version=20

[control]
; Names for custom terrain flags. There can be up to 8 of these.
; name          = rule name; In some circumstances user may see this
;                 as part of some sentences, so try to make it descriptive
;                 and sensible.
; helptxt       = displayed in the help for terrains with this flag (optional)
flags =
  { "name", "helptxt"
    _("Oil"), _("Has Oil Well instead of Mine.")
    _("NoPollution"), _("No Pollution nor Fallout appear here.")
    _("Low Land"), _("Terrain suitable for canal digging.")
  }

; Names for custom extra flags. There can be up to 8 of these.
; name          = rule name; In some circumstances user may see this
;                 as part of some sentences, so try to make it descriptive
;                 and sensible.
; helptxt       = displayed in the help for extra types with this flag
;                 (optional)
extra_flags =
  { "name", "helptxt"
      _("Quayable"), _("Allows Quays to be built.")
      _("IrrigationSource"), _("Is a water source for Irrigation.")
      _("WaterwaySource"), _("Is a water source for inland Canals.")
      _("Railable"), _("Allows Railroads to be built.")
  }

[parameters]

; Percentage of "land" tiles required to be adjacent to a water tile before
; it may be "reclaimed" into a land tile (0-101; 0=anywhere, default 101=nowhere)
ocean_reclaim_requirement = 30

; Percentage of "water" tiles required to be adjacent to a land tile before
; it may be "channeled" into a water tile (0-101; 0=anywhere, default 101=nowhere)
land_channel_requirement = 10

; Percentage of unfrozen tiles (no "Frozen" flag) required to be adjacent
; to a frozen tile before it can thaw (0-101; 0=anywhere, default 101=nowhere)
thaw_requirement = 1   ;1 tile is 12.5% 

; Percentage of frozen tiles ("Frozen" flag) required to be adjacent to an
; unfrozen tile before it can freeze (0-101; 0=anywhere, default 101=nowhere)
freeze_requirement = 1     ;1 tile is 12.5% 

; Bodies of water up to this size are considered freshwater lakes, if there is
; also terrain type(s) with flag "FreshWater" in the ruleset.
lake_max_size = 14

; How many native tiles first startunit must be able to reach.
; 0 to disable check.
min_start_native_area = 0

; How many fragments each movement point has.
; For example road movement costs are relative to this.
move_fragments = 9

; How many move_fragments IgTer unit movement costs
igter_cost = 3

; Whether diagonal movement has increased cost (no effect with hex topology)
; The cost increase is more accurate with larger values for move_fragments
pythagorean_diagonal = FALSE

; There is no resources in the middle of the oceans, only near coast
ocean_resources = FALSE

; /* <-- avoid gettext warnings
;
; The individual terrain types, one per section.
; Roughly sorted by identifier.
; The actual tag used (the * in [terrain_*]) must be unique for each terrain,
; and may be used in debug output when reading this file.
;
; Notes:
;
; name                 = translatable name as seen by user
; rule_name            = (optional) internal name for savegames, rulesets etc;
;                        if not present, "name" is used for this purpose too.
;                        Since the name used in savegames must not change, if
;                        you want to rename an item after a ruleset has been
;                        released, you should set "rule_name" to the original
;                        value of "name".
; graphic              = preferred graphic; Tilespec [tile_*] section
;                        with 'tag' matching this will be used.
; graphic_alt          = alternate graphic. When no tilespec 'tag' matching
;                        preferred graphic is not found, this will be used.
;                        Otherwise may be "-"
; identifier           = single-character identifier used in savegames. This
;                        must be unique for each terrain.
; class                = Terrain class terrain belongs to: "Land" or "Oceanic"
; movement_cost        = in whole movement points, not move_fragments;
;                        typically 1 to 3
; defense_bonus        = percent added to defense; typically 0% to 200%
; food                 = normal food production
; shield               = normal shield production
; trade                = normal trade production
; resources            = list of possible resources on this terrain
; road_food_incr_pct   = percent of road food_incr applied to this terrain
; road_shield_incr_pct = percent of road shield_incr applied to this terrain
; road_trade_incr_pct  = percent of road trade_incr applied to this terrain
; base_time            = time to build bases; if 0, cannot build any bases.
;                        Nonzero values only affect extras with build_time 0.
; road_time            = time to build roads; if 0, cannot build any roads.
;                        Nonzero values only affect extras with build_time 0.
; irrigation_result    = result of 'irrigate' activity; one of:
;                        "no"  -- cannot irrigate
;                        "yes" -- can build extra
;                        terrain section -- irrigation changes to that terrain
; irrigation_food_incr = increment to food if tile is 100% irrigated
;                        (actual bonus controlled by Irrigation_Pct effect)
; irrigation_time      = time for 'irrigate' activity; if 0, cannot irrigate
;                        Nonzero values only affect extras with build_time 0.
;                        Such extras can modify time with build_time_factor.
; mining_result        = result of 'mine' activity; one of:
;                        "no"  -- cannot mine
;                        "yes" -- can build extra
;                        terrain section -- mining changes to that terrain
; mining_shield_incr   = increment to shields if tile is 100% mined
;                        (actual bonus controlled by Mining_Pct effect)
; mining_time          = time for 'mine' activity; if 0, cannot mine
;                        Nonzero values only affect extras with build_time 0.
;                        Such extras can modify time with build_time_factor.
; transform_result     = result of transformation; one of:
;                        "no"  -- cannot transform
;                        terrain section -- transformation changes to that
;                          terrain
; transform_time       = time to transform; if 0, cannot transform
; pillage_time         = time to pillage extra from the tile (0 = impossible)
;                        Nonzero values only affect extras with removal_time 0.
; clean_pollution_time = time for 'clean pollution' activity (0 = impossible)
;                        Nonzero values only affect extras with removal_time 0.
; clean_fallout_time   = time for 'clean fallout' activity (0 = impossible)
;                        Nonzero values only affect extras with removal_time 0.
; animal               = unit type that can appear as animal on the terrain
; warmer_wetter_result = result of global warming for wet terrains; one of:
;                        "no"  -- no change; does not count for warming
;                        "yes" -- no change; counts for warming
;                        terrain section -- warming changes to that terrain
; warmer_drier_result  = result of global warming for dry terrains;
;                        see warmer_wetter_result
; cooler_wetter_result = result of nuclear winter for wet terrains;
;                        see warmer_wetter_result
; cooler_drier_result  = result of nuclear winter for dry terrains;
;                        see warmer_wetter_result
; native_to            = List of unit classes that can move here
; flags                = General flags for this terrain. List taken from the
;                        following, and/or any user flags defined above:
;   - NoBarbs          = Barbarians will not be spawned here.
;   - NoCities         = Cities may not be built or found on this terrain.
;   - Starter          = Players will only be started on "Starter" terrain.
;                        (Currently this cannot be Oceanic terrain.)
;   - CanHaveRiver     = Set to 1 if this terrain can have river on it (the
;                        actual chance of river generation is controlled
;                        separately).
;   - UnsafeCoast      = This terrain does not provide a safe voyage for
;                        units with flag "Trireme"
;   - FreshWater       = This terrain is used for small bodies of water.
;                        If this becomes adjacent to non-FreshWater terrain,
;                        the whole contiguous FreshWater area will be flooded
;                        with the non-FreshWater terrain.
;   - NotGenerated     = Map generator never places this terrain type. It can
;                        be added from editor only, or by ingame events
;                        (lua scripting)
;   - NoZoc            = Units on this terrain are not generating or subject
;                        to zoc
;   - NoFortify        = Units cannot fortify on this terrain
;   - Frozen           = Frozen/polar terrain. For water tiles, Frozen terrain
;                        is generated near poles. Conversion between frozen
;                        and unfrozen terrain can be controlled with
;                        thaw_requirement/freeze_requirement, and Frozen
;                        terrain is shown differently on the overview map.
; property_*           = specific property % values used by mapgen. Most
;                        terrains will have 0 for most values. Properties
;                        other than ocean_depth are only used for land tiles.
;  - mountainous       = degree to which this terrain is mountainous
;  - green             = how much life this terrain has
;  - foliage           = how much thick undergrowth the terrain has
;  - tropical          = how "tropical" the terrain is (high temperature)
;  - temperate         = how "temperate" the terrain is (med temperature)
;  - cold              = how "cold" the terrain is (low temperature)
;  - frozen            = how "frozen" the terrain is (very low temperature)
;                        (does not necessarily have to have the "Frozen" flag)
;  - wet               = how "wet" the terrain is (moisture)
;  - dry               = how "dry" the terrain is (moisture)
;  - ocean_depth       = the depth of an ocean, as an average level
; color.r              = color of the terrain (red value)
; color.g              = color of the terrain (green value)
; color.b              = color of the terrain (blue value)
; helptext             = optional help text string; should escape all raw
;                        newlines so that xgettext parsing works
;
; */ <-- avoid gettext warnings

; MAPGEN terrain deployment method:  ZONES, PARAMETERS. VALUES.
; 1. ZONES are pre-decided definitions of regions over the map.
;    ZONES are: plains (i.e. flat, not the terrain type), high elevation, wet, etc.
; ZONES then get a random terrain on each tile according to the logic of a tri-partite PARAMETER system:
; PARAMETERS are:   TARGET, PREFERRED, AVOID. PARAMETERS take VALUES which are:
; VALUES:  MG_TEMPERATE, MG_GREEN, MG_MOUNTAINOUS, i.o.w., the percentages given by property_temperate, etc., in terrain items defined in ruleset.
; Each parameter has a special logic.
; TARGET = all terrains with the passed PARAMTER property will be considered and one will be picked at random based on the % values for each terrain.
; PREFERRED =  only terrains with (some of) that property will be chosen.
; AVOID = all terrains with any of that property will be blacklisted from appearing in this ZONE. 
;
; ZONES are:
;  Plains:  MG_TEMPERATE, MG_GREEN, MG_MOUNTAINOUS.
;  Cold:    MG_COLD, MG_UNUSED, MG_MOUNTAINOUS
;  Frozen:  MG_FROZEN, MG_UNUSED, MG_MOUNTAINOUS
;  Forest:  MG_FOLIAGE, MG_TEMPERATE, MG_TROPICAL
;  Jungle:  MG_FOLIAGE, MG_TROPICAL, MG_COLD
; Wetland:  MG_WET, MG_UNUSED, MG_FOLIAGE
;  Desert:  MG_DRY, MG_TROPICAL, MG_COLD
;Alt-desert: MG_DRY, MG_TROPICAL, MG_WET


[terrain_inaccesible]
name                 = _("Inaccessible")
graphic              = "inaccessible"
graphic_alt          = "arctic"
identifier           = "i"
class                = "Land"
movement_cost        = 0
defense_bonus        = 0
food                 = 0
shield               = 0
trade                = 0
road_food_incr_pct   = 0
road_shield_incr_pct = 0
road_trade_incr_pct  = 0
base_time            = 0
road_time            = 0
irrigation_result    = "no"
irrigation_food_incr = 0
irrigation_time      = 0
mining_result        = "no"
mining_shield_incr   = 0
mining_time          = 0
transform_result     = "no"
transform_time       = 0
pillage_time         = 0
clean_pollution_time = 0
clean_fallout_time   = 0
animal               = "None"
warmer_wetter_result = "no"
warmer_drier_result  = "no"
cooler_wetter_result = "no"
cooler_drier_result  = "no"
flags                = "NotGenerated", "NoPollution", "NoCities", "UnsafeCoast", "Frozen"
color.r              = 25
color.g              = 25
color.b              = 25
helptext             = _("\
No unit can enter this terrain, nor can any city work its tiles.\
")

[terrain_lake]
name                 = _("Lake")
graphic              = "lake"
graphic_alt          = "coast"
identifier           = "+"
class                = "Oceanic"
movement_cost        = 1
defense_bonus        = 0
food                 = 1
shield               = 0
trade                = 2
resources            = "Fish"
road_trade_incr_pct  = 0
base_time            = 1
road_time            = 12       ; Sea Bridge
irrigation_result    = "no"
irrigation_food_incr = 0
irrigation_time      = 0
mining_result        = "no"
mining_shield_incr   = 0
mining_time          = 0
transform_result     = "Swamp"
transform_time       = 36
pillage_time         = 1
clean_pollution_time = 3
clean_fallout_time   = 3
animal               = "[Hippo]"
warmer_wetter_result = "Ocean"
warmer_drier_result  = "Ocean"
cooler_wetter_result = "Swamp"
cooler_drier_result  = "Swamp"
native_to            = "Sea", "Air", "Balloon", "Zeppelin", "Missile", "Helicopter", "Trireme", "RiverShip", "Submarine", "AirProtect", "Air_High_Altitude", "Bomb", "Space"
flags                = "NoCities", "NoBarbs", "NoPollution", "FreshWater", "NoZoc", "NoFortify"
property_ocean_depth = 0
color.r              = 80
color.g              = 176
color.b              = 247
helptext             = _("\
Lakes are bodies of fresh water not connected to sea or ocean.\
")

[terrain_ocean]
name                 = _("Ocean")
graphic              = "coast"
graphic_alt          = "-"
identifier           = " "
class                = "Oceanic"
movement_cost        = 1
defense_bonus        = 0
food                 = 1
shield               = 0
trade                = 2
resources            = "Fish", "Whales"
road_trade_incr_pct  = 0
base_time            = 1
road_time            = 12       ; Sea Bridge
irrigation_result    = "no"
irrigation_food_incr = 0
irrigation_time      = 0
mining_result        = "no"
mining_shield_incr   = 0
mining_time          = 0
transform_result     = "Swamp"
transform_time       = 36
pillage_time         = 1
clean_pollution_time = 3
clean_fallout_time   = 3
animal               = "None"
warmer_wetter_result = "no"
warmer_drier_result  = "no"
cooler_wetter_result = "Swamp"
cooler_drier_result  = "Swamp"
native_to            = "Sea", "Air", "Balloon", "Zeppelin", "Missile", "Helicopter", "Trireme", "RiverShip", "Submarine", "AirProtect", "Air_High_Altitude", "Bomb", "Space"
flags                = "NoCities", "NoPollution", "UnsafeCoast", "NoZoc", "NoFortify"
property_ocean_depth = 32
color.r              = 70
color.g              = 146
color.b              = 227
helptext             = _("\
Shallow oceans are mostly found near coastlines, and are often rich\
 sources of food and other resources.\
")

[terrain_deep_ocean]
name                 = _("Deep Ocean")
graphic              = "floor"
graphic_alt          = "coast"
identifier           = ":"
class                = "Oceanic"
movement_cost        = 1
defense_bonus        = 0
food                 = 1
shield               = 0
trade                = 2
;resources            = "none"
road_trade_incr_pct  = 0
base_time            = 1
road_time            = 0
irrigation_result    = "no"
irrigation_food_incr = 0
irrigation_time      = 0
mining_result        = "no"
mining_shield_incr   = 0
mining_time          = 0
transform_result     = "no"
transform_time       = 0
pillage_time         = 1
clean_pollution_time = 3
clean_fallout_time   = 3
animal               = "[Giant Squid]"
warmer_wetter_result = "no"
warmer_drier_result  = "no"
cooler_wetter_result = "no"
cooler_drier_result  = "no"
native_to            = "Trireme", "Sea", "Air", "Balloon", "Zeppelin", "Missile", "Helicopter", "RiverShip", "Submarine", "AirProtect", "Air_High_Altitude", "Bomb", "Space"
flags                = "NoCities", "NoPollution", "UnsafeCoast", "NoZoc", "NoFortify"
property_ocean_depth = 87
color.r              = 55
color.g              = 125
color.b              = 255
helptext             = _("\
Deep oceans cover much of the world away from coastlines, and only\
 seaworthy units can travel on them.\
")

[terrain_forest]
name                 = _("Forest")
graphic              = "forest"
graphic_alt          = "-"
identifier           = "f"
class                = "Land"
movement_cost        = 2
defense_bonus        = 33
food                 = 1
shield               = 2
trade                = 0
;Multiple entries stack the odds. We are doing this just to "register" Berries as a resource. We want control over how they appear usually.
resources            = "Pheasant","Silk","Pheasant","Silk","Pheasant","Silk","Pheasant","Silk","Pheasant","Silk","Pheasant","Silk","Pheasant","Silk","Pheasant","Silk","Pheasant","Silk","Pheasant","Silk","Pheasant","Silk","Pheasant","Silk","Pheasant","Silk","Pheasant","Silk","Pheasant","Silk","Berries"
road_trade_incr_pct  = 0
base_time            = 1
road_time            = 4
irrigation_result    = "Plains"
irrigation_food_incr = 0
irrigation_time      = 5
mining_result        = "Swamp"
mining_shield_incr   = 0
mining_time          = 15
transform_result     = "Grassland"
transform_time       = 24
pillage_time         = 1
clean_pollution_time = 3
clean_fallout_time   = 3
animal               = "[Leopard]"
warmer_wetter_result = "Jungle"
warmer_drier_result  = "Jungle"
cooler_wetter_result = "no"
cooler_drier_result  = "no"
native_to            = "Land", "LandNoKill", "LandAirSea", "Air", "Balloon", "Zeppelin", "Missile", "Helicopter", "AirProtect", "Air_High_Altitude", "Bomb", "Space"
flags                = "Starter", "CanHaveRiver", "Low Land"
property_cold        = 21
property_frozen      = 17
property_mountainous = 9
property_wet         = 34
property_foliage     = 50
property_temperate   = 50
property_green       = 18
color.r              = 43
color.g              = 157
color.b              = 19
helptext             = _("\
Forests are densely wooded, providing lumber for production — but\
 making agriculture problematic.\
")

[terrain_grassland]
name                 = _("Grassland")
graphic              = "grassland"
graphic_alt          = "-"
identifier           = "g"
class                = "Land"
movement_cost        = 1
defense_bonus        = 0
food                 = 2
shield               = 0
trade                = 0
resources            = "Resources"
road_trade_incr_pct  = 100
base_time            = 1
road_time            = 2
irrigation_result    = "yes"
irrigation_food_incr = 1
irrigation_time      = 5
mining_result        = "Forest"
mining_shield_incr   = 0
mining_time          = 10
transform_result     = "Hills"
transform_time       = 30
pillage_time         = 1
clean_pollution_time = 3
clean_fallout_time   = 3
animal               = "[Wolf]"
warmer_wetter_result = "Swamp"
warmer_drier_result  = "Swamp"
cooler_wetter_result = "Tundra"
cooler_drier_result  = "Tundra"
native_to            = "Land", "LandNoKill", "LandAirSea", "Air", "Balloon", "Zeppelin", "Missile", "Helicopter", "AirProtect", "Air_High_Altitude", "Bomb", "Space"
flags                = "Starter", "CanHaveRiver", "Low Land"
property_green       = 69
property_temperate   = 69
property_cold        = 20
property_dry         = 23
property_wet         = 100
property_tropical    = 40
color.r              = 100
color.g              = 178
color.b              = 105
helptext             = _("\
Grassland affords exceptional agricultural opportunities and decent trade.\
")

[terrain_hills]
name                 = _("Hills")
graphic              = "hills"
graphic_alt          = "-"
identifier           = "h"
class                = "Land"
movement_cost        = 2
defense_bonus        = 100
food                 = 1
shield               = 0
trade                = 0
resources            = "Coal", "Wine"
road_trade_incr_pct  = 0
base_time            = 1
road_time            = 4
irrigation_result    = "yes"
irrigation_food_incr = 1
irrigation_time      = 10
mining_result        = "yes"
mining_shield_incr   = 3
mining_time          = 10
transform_result     = "Plains"
transform_time       = 24
pillage_time         = 1
clean_pollution_time = 3
clean_fallout_time   = 3
animal               = "[Wolf]"
warmer_wetter_result = "no"
warmer_drier_result  = "no"
cooler_wetter_result = "no"
cooler_drier_result  = "no"
native_to            = "Land", "LandNoKill", "LandAirSea", "Air", "Balloon", "Zeppelin", "Missile", "Helicopter", "AirProtect", "Air_High_Altitude", "Bomb", "Space"
flags                = "Starter", "CanHaveRiver"
property_mountainous = 55
property_green       = 1
property_temperate   = 1
property_frozen      = 100
property_dry         = 9
property_cold        = 11
color.r              = 222
color.g              = 230
color.b              = 134
helptext             = _("\
Hills are frequently rich in resources. Difficult access makes\
 them good for defense but poor for trade.\
")

[terrain_jungle]
name                 = _("Jungle")
graphic              = "jungle"
graphic_alt          = "-"
identifier           = "j"
class                = "Land"
movement_cost        = 2
defense_bonus        = 50
food                 = 1
shield               = 1
trade                = 0
resources            = "Gems", "Fruit", "Rubber"
road_trade_incr_pct  = 0
base_time            = 1
road_time            = 4
irrigation_result    = "Grassland"
irrigation_food_incr = 0
irrigation_time      = 8
mining_result        = "Forest"
mining_shield_incr   = 0
mining_time          = 10
transform_result     = "Plains"
transform_time       = 12
pillage_time         = 1
clean_pollution_time = 3
clean_fallout_time   = 3
animal               = "[Tiger]"
warmer_wetter_result = "no"
warmer_drier_result  = "no"
cooler_wetter_result = "Forest"
cooler_drier_result  = "Forest"
native_to            = "Land", "LandNoKill", "LandAirSea", "Air", "Balloon", "Zeppelin", "Missile", "Helicopter", "AirProtect", "Air_High_Altitude", "Bomb", "Space"
flags                = "CanHaveRiver", "Low Land"
property_foliage     = 31
property_tropical    = 41
property_wet         = 40
color.r              = 71
color.g              = 227
color.b              = 0
helptext             = _("\
Jungles are densely overgrown but sometimes provide rich resources and good defense.\
")

[terrain_plains]
name                 = _("Plains")
graphic              = "plains"
graphic_alt          = "-"
identifier           = "p"
class                = "Land"
movement_cost        = 1
defense_bonus        = 0
food                 = 1
shield               = 1
trade                = 0
resources            = "Buffalo", "Wheat"
road_trade_incr_pct  = 100
base_time            = 1
road_time            = 2
irrigation_result    = "yes"
irrigation_food_incr = 1
irrigation_time      = 5
mining_result        = "Forest"
mining_shield_incr   = 0
mining_time          = 15
transform_result     = "Grassland"
transform_time       = 24
pillage_time         = 1
clean_pollution_time = 3
clean_fallout_time   = 3
animal               = "[Lion]"
warmer_wetter_result = "Desert"
warmer_drier_result  = "Desert"
cooler_wetter_result = "Tundra"
cooler_drier_result  = "Grassland"
native_to            = "Land", "LandNoKill", "LandAirSea", "Air", "Balloon", "Zeppelin", "Missile", "Helicopter", "AirProtect", "Air_High_Altitude", "Bomb", "Space"
flags                = "Starter", "CanHaveRiver", "Low Land"
property_green       = 38
property_temperate   = 38
property_frozen      = 90
property_dry         = 23
color.r              = 161
color.g              = 198
color.b              = 80
helptext             = _("\
Plains are broad flat regions with decent potential for\
 agriculture, production, and trade.\
")

[terrain_desert]
name                 = _("Desert")
graphic              = "desert"
graphic_alt          = "-"
identifier           = "d"
class                = "Land"
movement_cost        = 1
defense_bonus        = 0
food                 = 0
shield               = 1
trade                = 0
resources            = "Oasis", "Oil"
road_trade_incr_pct  = 100
base_time            = 1
road_time            = 2
irrigation_result    = "yes"
irrigation_food_incr = 1
irrigation_time      = 5
mining_result        = "yes"
mining_shield_incr   = 1
mining_time          = 5
transform_result     = "Plains"
transform_time       = 24
pillage_time         = 1
clean_pollution_time = 3
clean_fallout_time   = 3
animal               = "[Rhino]"
warmer_wetter_result = "Grassland"
warmer_drier_result  = "no"
cooler_wetter_result = "Plains"
cooler_drier_result  = "Plains"
native_to            = "Land", "LandNoKill", "LandAirSea", "Air", "Balloon", "Zeppelin", "Missile", "Helicopter", "AirProtect", "Air_High_Altitude", "Bomb", "Space"
flags                = "CanHaveRiver", "Oil", "Low Land"
property_dry         = 69
property_tropical    = 35
property_temperate   = 3
property_green       = 3
property_cold        = 0
property_mountainous = 2
color.r              = 247
color.g              = 222
color.b              = 187
helptext             = _("\
Deserts are very dry. Agriculture is difficult if not on a river or oasis. Cities on desert rivers\
 get +1 extra food. Irrigated desert rivers give an extra +1 food over the usual bonus, even on a\
 city center tile. \
"), _("\
Oil wells can be built when Construction is known. Refining gives +1 shield to Oil Wells built on Oil.\
")

[terrain_mountains]
name                 = _("Mountains")
graphic              = "mountains"
graphic_alt          = "-"
identifier           = "m"
class                = "Land"
movement_cost        = 3
defense_bonus        = 200
food                 = 0
shield               = 1
trade                = 0
resources            = "Gold", "Iron"
road_trade_incr_pct  = 0
base_time            = 1
road_time            = 6
irrigation_result    = "no"
irrigation_food_incr = 0
irrigation_time      = 0
mining_result        = "yes"
mining_shield_incr   = 1
mining_time          = 10
transform_result     = "Hills"
transform_time       = 24
pillage_time         = 1
clean_pollution_time = 3
clean_fallout_time   = 3
animal               = "[Bear]"
warmer_wetter_result = "no"
warmer_drier_result  = "no"
cooler_wetter_result = "no"
cooler_drier_result  = "no"
native_to            = "Land", "LandNoKill", "LandAirSea", "Air", "Zeppelin", "Missile", "Helicopter", "AirProtect", "Air_High_Altitude", "Bomb", "Space"
flags                = "CanHaveRiver"
property_mountainous = 30
property_green       = 15
property_temperate   = 15
property_frozen      = 20
color.r              = 160
color.g              = 156
color.b              = 170
helptext             = _("\
Mountains are regions of extreme altitude, excellent for defense but inferior\
 for trade and agriculture.\
")

[terrain_swamp]
name                 = _("Swamp")
graphic              = "swamp"
graphic_alt          = "-"
identifier           = "s"
class                = "Land"
movement_cost        = 2
defense_bonus        = 33
food                 = 1
shield               = 0
trade                = 0
resources            = "Peat", "Spice"
road_trade_incr_pct  = 0
base_time            = 1
road_time            = 4
irrigation_result    = "Grassland"
irrigation_food_incr = 0
irrigation_time      = 13
mining_result        = "Forest"
mining_shield_incr   = 0
mining_time          = 13
transform_result     = "Lake"
transform_time       = 12
pillage_time         = 1
clean_pollution_time = 3
clean_fallout_time   = 3
animal               = "[Crocodile]"
warmer_wetter_result = "Ocean"
warmer_drier_result  = "Lake"
cooler_wetter_result = "Grassland"
cooler_drier_result  = "Grassland"
native_to            = "Land", "LandNoKill", "LandAirSea", "Air", "Balloon", "Zeppelin", "Missile", "Helicopter", "AirProtect", "Air_High_Altitude", "Bomb", "Space"
flags                = "CanHaveRiver", "Low Land"
property_wet         = 80
property_tropical    = 10
color.r              = 129
color.g              = 179
color.b              = 146
helptext             = _("\
Swamps suffer from an over-abundance of water, making agriculture\
 and trade problematic.\
")

[terrain_tundra]
name                 = _("Tundra")
graphic              = "tundra"
graphic_alt          = "-"
identifier           = "t"
class                = "Land"
movement_cost        = 1
defense_bonus        = 0
food                 = 1
shield               = 0
trade                = 0
resources            = "Elk", "Furs", "Elk", "Furs", "Gold" ; 40/40/20 instead of 33/33/33
road_trade_incr_pct  = 100
base_time            = 1
road_time            = 2
irrigation_result    = "yes"
irrigation_food_incr = 1
irrigation_time      = 5
mining_result        = "Desert"
mining_shield_incr   = 0
mining_time          = 15
transform_result     = "Plains"
transform_time       = 24
pillage_time         = 1
clean_pollution_time = 3
clean_fallout_time   = 3
animal               = "[Polar Bear]"
warmer_wetter_result = "Grassland"
warmer_drier_result  = "Plains"
cooler_wetter_result = "Glacier"
cooler_drier_result  = "Glacier"
native_to            = "Land", "LandNoKill", "LandAirSea", "Air", "Balloon", "Zeppelin", "Missile", "Helicopter", "AirProtect", "Air_High_Altitude", "Bomb", "Space"
flags                = "Starter", "NoBarbs", "CanHaveRiver", "Low Land"
property_cold        = 17
property_frozen      = 7
color.r              = 206
color.g              = 206
color.b              = 206
helptext             = _("\
Tundra regions are cold and barren, only fit for mediocre agriculture and trade.\
")

[terrain_arctic]
name                 = _("Arctic")
rule_name            = "Glacier"
graphic              = "arctic"
graphic_alt          = "-"
identifier           = "a"
class                = "Land"
movement_cost        = 2
defense_bonus        = 0
food                 = 0
shield               = 0
trade                = 0
resources            = "Furs", "Ivory", "Oil" 
road_trade_incr_pct  = 0
base_time            = 1
road_time            = 4
irrigation_result    = "Tundra"
irrigation_food_incr = 0
irrigation_time      = 15
mining_result        = "yes"
mining_shield_incr   = 2
mining_time          = 10
transform_result     = "Desert"
transform_time       = 24
pillage_time         = 1
clean_pollution_time = 3
clean_fallout_time   = 3
animal               = "[Polar Bear]"
warmer_wetter_result = "Tundra"
warmer_drier_result  = "Tundra"
cooler_wetter_result = "no"
cooler_drier_result  = "no"
native_to            = "Land", "LandNoKill", "LandAirSea", "Air", "Balloon", "Zeppelin", "Missile", "Helicopter", "AirProtect", "Air_High_Altitude", "Bomb", "Space"
flags                = "NoBarbs", "NoCities", "CanHaveRiver", "Oil", "Frozen"
property_frozen      = 30
property_cold        = 2
color.r              = 238
color.g              = 238
color.b              = 238
helptext             = _("\
Arctic terrain is cold icy permafrost, found only in the far north or south.\
"), _("\
 Oil wells can be built when Refining is known.\
")

; /* <-- avoid gettext warnings
;
; Resource types:
;
; The actual tag used (the * in [resource_*]) must be unique for each resource,
; and may be used in debug output when reading this file.
;
; Notes:
;
; extra                = name of the extra this resource section is part of
;                        (must have "Resource" in its causes)
; identifier           = single-character identifier used in old savegames. This
;                        must be unique for each resource, and changing it will
;                        break loading those old savegames.
; food                 = increased food production
; shield               = increased shield production
; trade                = increased trade production
;
; */ <-- avoid gettext warnings

[resource_gold]
extra       = "Gold"
identifier  = "$"
trade       = 8
# mountains, tundra

[resource_iron]
extra       = "Iron"
identifier  = "/"
;shield      = 3  ;added in effects because only generated resources tied to a terrain type can access this var
# mountains.

[resource_elk]
extra       = "Elk"
identifier  = "e"
;food        = 2
;shield      = 2     ;added in effects because only generated resources tied to a terrain type can access this var
# tundra.

[resource_furs]
extra       = "Furs"
identifier  = "u"
;food        = 1
;shield      = 1
;trade       = 3     ;added in effects because only generated resources tied to a terrain type can access this var
# tundra

[resource_coal]
extra       = "Coal"
identifier  = "c"
shield      = 2
# hills.

[resource_fish]
extra       = "Fish"
identifier  = "y"
food        = 2
# ocean.

[resource_fruit]
extra       = "Fruit"
identifier  = "f"
food        = 4
trade       = 2
# jungle.

[resource_gems]
extra       = "Gems"
identifier  = "g"
;trade       = 5     ;added in effects because only generated resources tied to a terrain type can access this var
# jungle.

[resource_rubber]
extra       = "Rubber"
identifier  = "^"
;shield       = 2
;trade        = 2      ;added in effects because only generated resources tied to a terrain type can access this var
# jungle.

; "h" reserved for strategic horses

[resource_buffalo]
extra       = "Buffalo"
identifier  = "b"
shield      = 2
# plains (horses => buffalo => cattle).

[resource_wheat]
extra       = "Wheat"
identifier  = "j"
food        = 2
# plains.

; "k" reserved for (cane) sugar

; "l" reserved for tobacco

; "m" reserved for marble

[resource_oasis]
extra       = "Oasis"
identifier  = "o"
;food        = 3      ;added in effects because only generated resources tied to a terrain type can access this var
# desert.

[resource_peat]
extra       = "Peat"
identifier  = "a"
;shield      = 4      ;added in effects because only generated resources tied to a terrain type can access this var
# swamp (petroleum => peat => petroleum).

[resource_pheasant]
extra       = "Pheasant"
identifier  = "p"
food        = 2
# forest, forested.

[resource_bonus]
extra       = "Resources"
identifier  = "r"
shield      = 1
# grassland.

[resource_icy_ivory]
extra       = "Ivory"
identifier  = "i"
;food        = 1     ;added in effects because only generated resources tied to a terrain type can access this var
;shield      = 1
;trade       = 4
# arctic 

[resource_silk]
extra       = "Silk"
identifier  = "s"
trade       = 3
# forest

[resource_spice]
extra       = "Spice"
identifier  = "t"
;food        = 2
;trade       = 4      ;added in effects because only generated resources tied to a terrain type can access this var
# swamp-only.

; "u" reserved for uranium

[resource_whales]
extra       = "Whales"
identifier  = "v"
food        = 1
shield      = 1
# ocean (sea).

[resource_wine]
extra       = "Wine"
identifier  = "w"
trade       = 4
# hills-only.

[resource_oil]
extra       = "Oil"
identifier  = "x"
;was added in effects so it could be appearing resource; too many layer permutations to work out.
shield      = 3 ; arctic used to have 4, now it's 3+2 allowing an 0 2 0 tile.
# arctic, desert

[resource_berries]
extra       = "Berries"
identifier  = "@"
;food        = 1
;trade       = 2  ;added in effects because only generated resources tied to a terrain type can access this var
# forest, forested.

[resource_forest_game]
extra       = "Deer"
identifier  = "d"
;food      = 3  ;food added in effects because only generated resources tied to a terrain type can access this var

[resource_wild_boar]
extra       = "Wild Boar"
identifier  = "q"
;food      = 3  ;food added in effects because only generated resources tied to a terrain type can access this var


[extraui]
; Player visible names of the base gui types.
ui_name_base_fortress = _("?gui_type:Build Fort/Buoy")
ui_name_base_airbase = _("?gui_type:Build Airbase")

; /* <-- avoid gettext warnings
;
; Each extra, including bases, roads, and resource, must have a section here.
; Bases, roads, and resources have additional sections for their specific features.
;
;
; Extra types:
;
; name                    = translatable name as seen by user
; rule_name               = (optional) internal name for savegames, rulesets
;                           etc; if not present, "name" is used for this
;                           purpose too. Since the name used in savegames must
;                           not change, if you want to rename an item after a
;                           ruleset has been released, you should set
;                           "rule_name" to the original value of "name".
; category                = How UI should categorize this extra. One of
;                           "Infra", "Natural", "Nuisance", "Resource",
;                           or "Bonus"
; causes                  = events that can create extra type.
;                           "Irrigation", "Mine", "Hut", "Pollution", "Fallout",
;                           "Appear", "Resource", "Base", or "Road"
;                           (the last three require a corresponding
;                           [resource_*] / [base_*] / [road_*] section)
; rmcauses                = events that can remove extra type.
;                           "CleanPollution", "CleanFallout", "Pillage", or
;                           "Disappear"
; graphic                 = tag specifying preferred graphic
; graphic_alt             = tag for alternate graphic if preferred graphic is
;                           not present. Can use eg "-" for no alternate
;                           graphic
; activity_gfx            = tag specifying graphic for unit building extra
;                           This can be "None" to indicate that graphic sprite
;                           is not needed.
; act_gfx_alt             = tag for alternative graphic for unit building extra
; act_gfx_alt2            = tag for second alternative graphic for unit building extra
; rmact_gfx               = tag specifying graphic for unit removing extra
;                           This can be "None" to indicate that graphic sprite
;                           is not needed.
; rmact_gfx_alt           = tag for alternative graphic for unit removing extra
; reqs                    = requirements to build the extra (see effects.ruleset
;                           and README.effects for help on requirements)
; rmreqs                  = requirements to remove the extra
; appearance_reqs         = spontaneous appearance requirements
; disappearance_reqs      = spontaneous disappearance requirements
; visibility_req          = Tech a player needs to have to see the extra
;                           This affects visibility only, for all the rules
;                           extra is still there even if player can't see it.
; buildable               = Can extra be built? Defaults to TRUE if extra has
;                           any causes indicating it can result from worker
;                           activity. If extra is not buildable, it can appear
;                           in-game only if placed in the editor, it's placed by
;                           map generator, or on city tile if the extra
;                           also has "AlwaysOnCityCenter" flag set.
; generated               = Can map generator place the extra? Applicable
;                           for Hut, Resource, and River extras.
; build_time              = how long it takes a unit to build this extra.
;                           Value of 0 (default) means that terrain- and
;                           build activity specific time is used instead.
; build_time_factor       = This setting take effect only if build_time is 0.
;                           Terrain and activity specific build time will be
;                           multiplied by this value (default 1)
; removal_time            = how long it takes a unit to remove this extra.
;                           Value of 0 (default) means that terrain- and
;                           removal activity specific time is used instead.
; removal_time_factor     = This setting take effect only if removal_time is 0.
;                           Terrain and activity specific removal time will be
;                           multiplied by this value (default 1)
; defense_bonus           = Percent added to defense when tile has the extra
;                           (default none)
; unit_seen               = How opponents see units inside this extra
;                           "Normal" - Units are seen normally (default)
;                           "Hidden" - Units are hidden from opponents
; appearance_chance       = If extra has cause "Appear" and other requirements
;                           for its appearance are fulfilled, this tells how big
;                           chance it has to appear each turn. The chance is 1/10000
;                           times this value.
; disappearance_chance    = If extra has rmcause "Disappear" and other requirements
;                           for its disappearance are fulfilled, this tells how big
;                           chance it has to disappear each turn. The chance is 1/10000
;                           times this value.
; native_to               = List of unit classes that are considered to
;                           be inside the extra when they are on same tile
; conflicts               = List of extras that cannot be on the same tile.
;                           Bases with non-zero border_sq automatically conflict
;                           with each other.
; hidden_by               = List of extra types that will make this extra
;                           type not to show on UI if both present.
; bridged_over            = List of extra types that, if present in tile, will prevent
;                           building this extra if can't be bridged over
; flags
;   - "NativeTile"        = Native units consider tile native regardless of
;                           terrain
;   - "Refuel"            = Native units can use tile as refuel point
;   - "TerrChangeRemoves" = Extra gets removed when ever terrain changes even
;                           if target terrain could support it
;   - "AlwaysOnCityCenter" = City center tiles always have this extra type
;                           regardless of its other requirements
;   - "AutoOnCityCenter"  = City center tiles will automatically have this
;                           extra type if the player can build it
;   - "ConnectLand"       = Road style gfx on Oceanic tiles are drawn to
;                           connect to adjacent Land tiles even if they have
;                           no extra. This affects appearance only
;   - "GlobalWarming"     = Instances of this extra on map count towards
;                           Global Warming
;   - "NuclearWinter"     = Instances of this extra on map count towards
;                           Nuclear Winter
;   - "ShowFlag"          = Draw owner's flag
;   - "NaturalDefense"    = Extra's defense bonus will be counted to "Natural"
;                           defense layer. The defense bonus of all the extras
;                           located at the tile, native to defending unit,
;                           is calculated as a 1 + sum of bonuses from the extras
;                           on the default "Fortification" defense layer multiplied
;                           by the 1 + sum of bonuses from the extras on the
;                           "Natural" layer.
;   - "NoStackDeath"      = Units inside do not die all at once when attacked
; helptext                = optional help text string; should escape all raw
;                           newlines so that xgettext parsing works
;
; */ <-- avoid gettext warnings

[extra_irrigation]
name           = _("Irrigation")
category       = "Infra"
causes         = "Irrigation"
rmcauses       = "Pillage"
graphic        = "tx.irrigation"
graphic_alt    = "-"
activity_gfx   = "unit.irrigation"
act_gfx_alt    = "unit.irrigate"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
build_time     = 0
removal_time   = 0
conflicts      = "Mine", "Oil Well"
hidden_by      = "Farmland"
flags          = "IrrigationSource"
helptext       = _("\
Irrigating a suitable tile causes it to produce extra food each turn. Most\
 tiles yield +1 extra food. A desert river that does not already benefit\
 from an oasis will yield +2, or +3 if it is a city on a desert river.\
"), _("\
Irrigating a tile with a mine or oil well will destroy it.\
"), _("\
City center tiles get their terrain irrigation bonus automatically, \
if there is no conflicting mine or oil well on the tile; however, \
this does not make cities count as a water source for further \
irrigation. Irrigation can be built on the city tile simply to allow \
irrigating elsewhere, but will not give the tile any further bonus \
except in the case of a desert river (see above.)\
")

[extra_mine]
name           = _("Mine")
category       = "Infra"
causes         = "Mine"
rmcauses       = "Pillage"
graphic        = "tx.mine"
graphic_alt    = "-"
activity_gfx   = "unit.mine"
act_gfx_alt    = "unit.plant"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
reqs           =
    { "type", "name", "range", "present", "quiet"
      "TerrainFlag", "Oil", "Local", FALSE, TRUE
    }
build_time     = 0
removal_time   = 0
conflicts      = "Irrigation", "Farmland"
helptext       = _("\
Mines can be built on some types of terrain, which increases the \
number of production points produced by that tile. Hills get an extra \
3 production points per tile; other terrains get 1 extra production \
point.\
"), _("\
Building a mine on an irrigated tile will destroy the irrigation.\
")

[extra_oil_well]
name           = _("Oil Well")
category       = "Infra"
causes         = "Mine"
rmcauses       = "Pillage"
graphic        = "tx.oil_mine"
graphic_alt    = "tx.mine"
activity_gfx   = "unit.oil_mine"
act_gfx_alt    = "unit.mine"
act_gfx_alt2   = "unit.plant"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
reqs           =
    { "type", "name", "range", "quiet"
      "TerrainFlag", "Oil", "Local", TRUE
    }
build_time     = 0
removal_time   = 0
conflicts      = "Irrigation", "Farmland"
helptext       = _("\
Oil wells behave like mines (giving an extra production point), but \
require more technology. Oil wells can be built on Desert with knowledge \
of Construction, and on Arctic terrain with knowledge of Refining.\
"), _("\
Building an oil well on an irrigated tile will destroy the irrigation.\
")

[extra_pollution]
name           = _("Pollution")
category       = "Nuisance"
causes         = "Pollution"
rmcauses       = "CleanPollution"
graphic        = "tx.pollution"
graphic_alt    = "-"
activity_gfx   = "None"
act_gfx_alt    = "-"
act_gfx_alt2   = "-"
rmact_gfx      = "unit.pollution"
rmact_gfx_alt  = "-"
reqs           =
    { "type", "name", "range", "present", "quiet"
      "TerrainFlag", "NoPollution", "Local", FALSE, TRUE
    }
removal_time   = 0
flags          = "GlobalWarming"
helptext       = _("\
Pollution appears on land tiles around cities with high production or \
population. \
It halves all output from its tile, and contributes to the risk of \
global warming.\
"), _("\
The pollution can only be cleared by dispatching Workers, \
Settlers, or Engineers with the \"clean pollution\" order.\
"), _("\
Pollution from production is likely to start becoming important as \
your civilization becomes more industrialized, giving you buildings \
such as Factory and Coal Plant which boost production. Replacing a \
Coal Plant with cleaner forms of energy -- a Hydro Plant / Hoover \
Dam, Nuclear Plant, or Solar Plant -- will reduce pollution from \
production, as will a Recycling Center or knowledge of \
Environmentalism.\
"), _("\
The city population starts adding to pollution with the discovery of \
Industrialization, and Automobile, Mass Production, and Plastics make \
this worse. Building a Mass Transit in a city eliminates the \
populational contribution to pollution.\
"), _("\
The contribution of these factors can be seen in the city dialog; once \
it exceeds a threshold, the excess is the percent chance of pollution \
appearing each turn.\
"), _("\
When an unused tile becomes polluted, there is the temptation to avoid \
the effort of cleaning it; but the spread of pollution has far more \
terrible results than the immediate economic impact -- every polluted \
tile increases the chance of global warming. Each time global warming \
advances, the entire world loses coastal land to the sea and to jungles \
and swamps, and inland tiles are lost to desert. This tends to \
devastate cities and leads to global impoverishment.\
"), _("\
The risk of global warming is cumulative; the longer polluted tiles \
are left uncleaned, the higher the risk becomes, and the risk can \
linger for some time even after all pollution has been cleaned. If a \
long time passes with an elevated risk of warming, its effects will be \
all the more severe when it does occur.\
")

[extra_hut]
name           = _("Minor Tribe Village")
rule_name      = "Hut"
category       = "Bonus"
causes         = "Hut"
;rmcauses       = ""
graphic        = "tx.village"
graphic_alt    = "-"
activity_gfx   = "None"
act_gfx_alt    = "-"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
reqs           =
    { "type", "name", "range"
      "TerrainClass", "Land", "Local"
    }
helptext = _("\
Villages (also called \"huts\") are primitive communities spread \
across the world at the beginning of the game. Any land unit can enter \
a village, making the village disappear and deliver a random response. \
If the village proves hostile, it could produce barbarians or the unit \
entering may simply be destroyed. If they are friendly, the player \
could receive gold, a new technology, a military unit (occasionally a \
settler; and sometimes a unit that the player cannot yet create), or \
even a new city.\
"), _("\
Later in the game, helicopters may also enter villages, but overflight \
by other aircraft will cause the villagers to take fright and disband.\
")

[extra_farmland]
name           = _("Farmland")
category       = "Infra"
causes         = "Irrigation"
rmcauses       = "Pillage"
graphic        = "tx.farmland"
graphic_alt    = "-"
activity_gfx   = "unit.farmland"
act_gfx_alt    = "unit.irrigation"
act_gfx_alt2   = "unit.irrigate"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
reqs           =
    { "type", "name", "range"
      "Tech", "Refrigeration", "Player"
      "Extra", "Irrigation", "Local"
    }
build_time     = 0
removal_time   = 0
conflicts      = "Mine", "Oil Well"
flags          = "IrrigationSource"
helptext       = _("\
Once Refrigeration is known, irrigation systems can be upgraded to \
farmland by irrigating them a second time; if the city working the tile \
has a Supermarket, a farmland tile provides twice as much food.\
"), _("\
Like irrigation, farmland is incompatible with mines and oil wells.\
")

[extra_fallout]
name           = _("Fallout")
category       = "Nuisance"
causes         = "Fallout"
rmcauses       = "CleanFallout", "Disappear"
graphic        = "tx.fallout"
graphic_alt    = "-"
activity_gfx   = "None"
act_gfx_alt    = "-"
act_gfx_alt2   = "-"
rmact_gfx      = "unit.fallout"
rmact_gfx_alt  = "unit.pollution"
reqs           =
    { "type", "name", "range", "present", "quiet"
      "TerrainFlag", "NoPollution", "Local", FALSE, TRUE
    }
removal_time   = 0
disappearance_chance    = 1500
disappearance_reqs = 
    { "type",           "name", "range"
    }
flags          = "NuclearWinter"
helptext       = _("\
Nuclear fallout can appear on land tiles when a Nuclear unit is \
detonated. It halves all output from its tile.\
"), _("\
Every tile with nuclear fallout also increases the risk of global \
nuclear winter. If nuclear winter occurs, land across the globe \
changes into desert, tundra, and ice, and lakes and oceans freeze.\
"), _("\
Settlers, Workers, and Engineers can clean up nuclear fallout.\
 Nuclear fallout disperses and disappears randomly over time.\
 On average, it lasts for 5 turns.\
")

; ***************************** BASES ****************************************
[extra_hideout]
rule_name      = "Hideout"
name           = _("")      ; null name is to prevent awareness of it.
category       = "Infra"
causes         = "Base"
rmcauses       = "Pillage", "Disappear"
graphic        = "None"
graphic_alt    = "None"
activity_gfx   = "unit.hideout"
act_gfx_alt    = "unit.buoy"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
reqs           =
    { "type",    "name",      "range","present","quiet"
      "CityTile","Center",    "Local", FALSE,    TRUE
      "Terrain", "Hills",     "Local", FALSE,    FALSE
      "Terrain", "Plains",    "Local", FALSE,    FALSE
      "Terrain", "Grassland", "Local", FALSE,    FALSE
      "Terrain", "Tundra",    "Local", FALSE,    FALSE
      "Terrain", "Desert",    "Local", FALSE,    FALSE
      "Terrain", "Glacier",    "Local", FALSE,    FALSE
      "Tech", "Warrior Code", "Player",TRUE,     FALSE
      "TerrainClass","Land",  "Local", TRUE,     FALSE
      "UnitFlag","CanHide",   "Local", TRUE,     FALSE
      "Extra",   "Naval Base","Local", FALSE,    FALSE
      "Extra",   "Fortress",  "Local", FALSE,    FALSE
      "Extra",   "Airbase",   "Local", FALSE,    FALSE
      "Extra",   "Fort",      "Local", FALSE,    FALSE
      "Extra",   "Quay",      "Local", FALSE,    FALSE
      "ServerSetting","hideouts","World",TRUE,   FALSE
    }
disappearance_reqs = 
    { "type",           "name", "range",  "present"
      "MaxUnitsOnTile", "0",    "Local",  TRUE
      "Extra",          "Ruins","Local",  FALSE
    }
disappearance_chance    = 1500     ; 1500/10000 = 15% per turn if unoccupied
build_time     = 3
removal_time   = 0
unit_seen      = "Hidden"
native_to      = "Land", "LandAirSea", "LandNoKill", "Helicopter"
flags          = "NativeTile"
helptext       = _("\
Since the dawn of time, camouflaged and concealed terrain has been\
 enhanced to make Hideouts. Usually the intent is to evade an\
 aggressor or to set an ambush. Hideouts can only be put in Forests,\
 Swamps, Mountains, and Jungle. Warrior Code must be known. Tile must\
 be Friendly or Unclaimed. Only Foot soldiers can make Hideouts. Only\
 Land units and Helicopters can hide in them. Other types will be seen.\
 Invisibility is the only bonus of a Hideout. Hideouts can't stack with\
 other bases. Hideouts are invisible to anyone not occupying the tile with\
 a Land unit. For each turn it is unoccupied, a Hideout has a 15% chance\
 of being lost to the elements of nature. The only way to know if there is\
 a Hideout on a tile is to move a Land unit onto it.\
"), _("
TIP: Hideouts are good for guarding a border or setting a trap for\
 intruders. Be careful! An abandoned Hideout can be used against you!\ 
")

[extra_fort]
name           = _("Fort")
category       = "Infra"
causes         = "Base"
rmcauses       = "Pillage"
graphic        = "base.outpost"
graphic_alt    = "base.fortress"
activity_gfx   = "unit.outpost"
act_gfx_alt    = "unit.fortress"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
reqs           =
    { "type", "name", "range", "present", "quiet"
      "Tech", "Masonry", "Player", TRUE, FALSE
      "TerrainClass", "Land", "Local", TRUE, FALSE
      "UnitFlag", "CanFortress", "Local", TRUE, FALSE
      "CityTile", "Center", "Local", FALSE, TRUE
      "Extra", "Hideout", "Local", FALSE, FALSE
    }
build_time     = 3
removal_time   = 0
native_to      = "Land", "LandAirSea", "LandNoKill", "LandRoad", "Helicopter", "Balloon", "AirProtect"
hidden_by      = "Fortress", "Naval Base", "Castle", "Bunker"
flags          = "NativeTile", "NoStackDeath"  ;, "Refuel"
;NOTE: effect_fortress_regen should give 25% of 20HP to helicopter, +1hp for being stationary
;thus a fortress should give +6hp -2hp for not being in refuel spot or +4hp/turn. Healing 67% 
;as fast as an airbase. MEANWHILE, removing the refuel flag allows us to make Forts native 
;to AirProtect so that they cannot prevent attacks on forts. This is debatable issue of 
;Fort with no Killstack but not Airprotected vs no fort, Killstack and Airprotect, but 
;many times fighters over forts have come up as a dynamic. 
helptext       = _("\
Forts are rapidly built fortifications which give Land units +33% defense\
 against Land and Sea units. Defending units are lost one at a time instead\
 of the entire stack dying. A fort is necessary to start building a fortress.\
"), _("
TIP: Forts make great outposts for keeping watch on your borders. Be careful--\
an unmanned Fort can be claimed by a foreign unit.\ 
")

[extra_fortress]
name           = _("Fortress")
category       = "Infra"
causes         = "Base"
rmcauses       = "Pillage"
graphic        = "base.fortress"
graphic_alt    = "-"
activity_gfx   = "unit.fortress"
act_gfx_alt    = "-"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
reqs           =
    { "type", "name",            "range","present", "quiet"
      "Extra", "Fort",           "Local",  TRUE,  FALSE
      "Extra", "Naval Base",     "Local",  FALSE, TRUE
      "Extra", "Hideout",        "Local",  FALSE, FALSE
      "Tech", "Construction",    "Player", TRUE,  FALSE
      "TerrainClass", "Land",    "Local",  TRUE,  FALSE
      "UnitFlag", "CanFortress", "Local",  TRUE,  FALSE
      "CityTile", "Center",      "Local",  FALSE, TRUE
    }
build_time     = 5
removal_time   = 0
conflicts      = "Naval Base"
defense_bonus  = 67
native_to      = "Land", "LandAirSea", "LandNoKill", "LandRoad", "Cargo", "Helicopter", "Balloon", "Zeppelin"
hidden_by      = "Castle", "Bunker"
flags          = "NativeTile", "Refuel", "NoStackDeath"
helptext       = _("\
Fortresses are improvements built on top of Forts which greatly improve defense.\
 A Land unit remaining in a Fortress for a whole turn without moving recovers a\
 quarter of its hit points. With Invention, Fortresses gain watchtowers from which\
 land units can see farther.\
"), _("\
Units in a Fortress die one at a time instead of the entire stack being lost.\
Diplomatic units get a 25% defense bonus in diplomatic fights.\
")

[extra_navalbase]
name           = _("Naval Base")
category       = "Infra"
causes         = "Base"
rmcauses       = "Pillage"
graphic        = "base.navalbase"
graphic_alt    = "base.fortress"
activity_gfx   = "unit.navalbase"
act_gfx_alt    = "unit.fortress"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
reqs           =
    { "type", "name", "range", "present", "quiet"
      "Extra", "Fort", "Local", TRUE, FALSE
      "Extra", "Fortress", "Local", FALSE, TRUE
      "Extra", "Hideout", "Local", FALSE, FALSE
      "Tech", "Engineering", "Player", TRUE, FALSE
      "TerrainFlag", "Low Land", "Local", TRUE, FALSE
      "TerrainClass", "Oceanic", "CAdjacent", TRUE, FALSE
      "UnitFlag", "CanFortress", "Local", TRUE, FALSE
      "CityTile", "Center", "Local", FALSE, TRUE
    }
build_time     = 8
removal_time   = 0
conflicts      = "Fortress", "Castle", "Bunker"
defense_bonus  = 67
native_to      = "Trireme", "RiverShip", "Sea", "Submarine", "Balloon", "Zeppelin", 
                 "Land", "LandRoad", "Cargo", "LandAirSea", "LandNoKill", "Helicopter"
flags          = "NativeTile", "NoStackDeath", "Refuel"
helptext       = _("\
Naval bases are coastal Fortresses with ocean access. They allow ships to enter and\ 
 receive a 1.33x bonus from superior fortifications and defensive position. Naval\
 Bases are built into Fortresses--all other units get the benefits of a Fortress.\
"), _("
NOTE: Naval bases are the only location where ships can be sure to avoid stack death without\
 suffering a defense disadvantage.\ 
")

[extra_castle]
name           = _("Castle")
category       = "Infra"
causes         = "Base"
rmcauses       = "Pillage"
graphic        = "base.castle"
graphic_alt    = "base.fortress"
activity_gfx   = "unit.castle"
act_gfx_alt    = "unit.fortress"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
reqs           =
    { "type", "name", "range", "present", "quiet"
      "Extra", "Fortress", "Local", TRUE, FALSE
      "Tech", "Construction", "Player", TRUE, FALSE
      "Tech", "Feudalism", "Player", TRUE, FALSE
      "Tech", "Gunpowder", "Player", FALSE, FALSE
      "TerrainClass", "Land", "Local", TRUE, FALSE
      "UnitFlag", "CanFortress", "Local", TRUE, FALSE
      "CityTile", "Center", "Local", FALSE, TRUE
;      "Extra", "River", "Local", FALSE, FALSE
    }
build_time     = 21
removal_time   = 0
unit_seen      = "Hidden"
native_to      = "Land",  "LandAirSea", "LandNoKill", "LandRoad", "Cargo", "Helicopter", "Balloon", "Zeppelin"
conflicts      = "Airbase", "Naval Base", "Bunker"
flags          = "NativeTile", "Refuel", "NoStackDeath"
helptext       = _("\
Before the age of Gunpowder, Castles were built as fortresses with an \
administration center. Construction on them can only begin once the \
underlying Fortress is complete.\
"), _("\
The Castle and its surrounding area is ruled by a vassal with a high \
degree of autonomy. This makes a Castle able to control terrain far from \
the borders of its nation's cities.\
")

[extra_bunker]
name           = _("Bunker")
category       = "Infra"
causes         = "Base"
rmcauses       = "Pillage"
graphic        = "base.bunker"
graphic_alt    = "base.fortress"
activity_gfx   = "unit.fortress"
act_gfx_alt    = "unit.castle"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
reqs           =
    { "type", "name", "range", "present", "quiet"
      "Extra", "Fortress", "Local", TRUE, FALSE
      "Extra", "Castle", "Local", FALSE, FALSE
      "Tech", "Gunpowder", "Player", TRUE, FALSE
      "Tech", "Steel", "Player", TRUE, FALSE
      "TerrainClass", "Land", "Local", TRUE, FALSE
      "UnitFlag", "CanFortress", "Local", TRUE, FALSE
      "CityTile", "Center", "Local", FALSE, TRUE
;      "Extra", "River", "Local", FALSE, FALSE
    }
build_time     = 36
removal_time   = 0
unit_seen      = "Hidden"
native_to      = "Land",  "LandAirSea", "LandNoKill", "LandRoad", "Cargo", "Helicopter", "Balloon", "Zeppelin"
conflicts      = "Airbase", "Naval Base", "Castle"
flags          = "NativeTile", "Refuel", "NoStackDeath"
helptext       = _("\
Bunkers are underground Fortresses made of concrete and steel, \
immune to air and missile attacks. In some respects they are the \
modern equivalent of a Castle.\
")

[extra_airbase]
name           = _("Airbase")
category       = "Infra"
causes         = "Base"
rmcauses       = "Pillage"
graphic        = "base.airbase"
graphic_alt    = "-"
activity_gfx   = "unit.airbase"
act_gfx_alt    = "unit.fortress"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
reqs           =
    { "type", "name", "range", "present", "quiet"
      "Tech", "Radio", "Player", TRUE, FALSE
      "Extra", "Hideout", "Local", FALSE, FALSE
      "TerrainClass", "Land", "Local", TRUE, FALSE
      "UnitFlag", "Airbase", "Local", TRUE, FALSE
      "CityTile", "Center", "Local", FALSE, TRUE
    }
build_time     = 3
removal_time   = 0
native_to      = "Air", "Balloon", "Zeppelin", "Helicopter", "Missile", "Bomb", "AirProtect", "Air_High_Altitude"
conflicts      = "Castle", "Bunker"
flags          = "Refuel", "NoStackDeath"
helptext       = _("\
Airbases allow your air units to land and refuel outside cities. \
Air units in an airbase may be attacked by land units.\
"), _("\
Units can paradrop from this tile.\
")

[extra_radar]
name           = _("Radar")
category       = "Infra"
causes         = "Base"
rmcauses       = "Pillage"
graphic        = "base.airbase"
graphic_alt    = "-"
activity_gfx   = "unit.radar"
act_gfx_alt    = "unit.airbase"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
reqs           =
    { "type", "name", "range", "present", "quiet"
      "Tech", "Radar", "Player", TRUE, FALSE
      "Extra", "Hideout", "Local", FALSE, FALSE
      "Extra", "Airbase", "Local", TRUE, FALSE
      "TerrainClass", "Land", "Local", TRUE, FALSE
      "UnitFlag", "Airbase", "Local", TRUE, FALSE
      "UnitType", "Marines", "Local", FALSE, TRUE
      "CityTile", "Center", "Local", FALSE, TRUE
    }
build_time     = 5
removal_time   = 0
native_to      = "Air", "Balloon", "Zeppelin", "Helicopter", "Missile", "Bomb", "AirProtect", "Air_High_Altitude"
flags          = "Refuel", "NoStackDeath"
helptext       = _("\
With the available tech, Radar can be added to an Airbase, which significantly increases its vision.\
")

[extra_buoy]
name           = _("Buoy")
category       = "Infra"
causes         = "Base"
rmcauses       = "Pillage"
graphic        = "base.buoy"
graphic_alt    = "base.fortress"
activity_gfx   = "unit.buoy"
act_gfx_alt    = "unit.fortress"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
reqs           =
    { "type", "name", "range", "present", "quiet"
      "Tech", "Radio", "Player", TRUE, FALSE
      "TerrainClass", "Oceanic", "Local", TRUE, FALSE
      "UnitFlag", "Airbase", "Local", TRUE, FALSE
      "CityTile", "Center", "Local", FALSE, TRUE
    }
build_time     = 3
removal_time   = 0
flags          = "ShowFlag"
helptext       = _("\
Buoys may be built in the ocean (by units on a sea-going vessel) to \
allow their owner to see the surrounding tiles.\
")

[extra_ruins]
name           = _("Ruins")
category       = "Bonus"
;causes         = ""
rmcauses       = "Pillage"
graphic        = "extra.ruins"
graphic_alt    = "base.ruins"
activity_gfx   = "None"
act_gfx_alt    = "-"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
reqs           =
    { "type", "name", "range", "present", "quiet"
      "TerrainClass", "Land", "Local", TRUE, FALSE
      "CityTile", "Center", "Local", FALSE, TRUE
    }
buildable      = FALSE
removal_time   = 0
flags          = "TerrChangeRemoves"
helptext       = _("\
Ruins mark the former site of a city that was destroyed or abandoned.\
")

[extra_quay]
name           = _("Quay")
category       = "Infra"
causes         = "Road"
rmcauses       = "Pillage"
graphic        = "base.quay"
graphic_alt    = "base.fort"
activity_gfx   = "unit.quay"
act_gfx_alt    = "unit.outpost"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
reqs           =
    { "type",        "name",       "range", "present", "quiet"
;      "Extra",       "River",     "Local",  TRUE,      FALSE
      "ExtraFlag",   "Quayable",   "Local",  TRUE,      FALSE
      "Tech",        "Pottery",    "Player", TRUE,      FALSE
      "TerrainClass","Land",       "Local",  TRUE,      FALSE
      "UnitFlag",    "CanFortress","Local",  TRUE,      TRUE
      "Extra",       "Hideout",    "Local",  FALSE,     TRUE
    }
build_time     = 3
removal_time   = 0
native_to      = "Land", "LandRoad", "LandAirSea", "LandNoKill", "Trireme", "Cargo", "Balloon", "Zeppelin", "RiverShip"
;hidden_by      = ""
flags          = "NativeTile", "AutoOnCityCenter"
helptext       = _("\
Quays are structures on both sides of rivers, where boats dock parallel to the\
 river bank for quick loading and unloading. River traffic can directly offload\
 onto nearby roads and be underway. Quays also have built-in infrastructure to ferry\
 units across a river——the ancient way to cross rivers before the advent of Bridge\
 Building. Stepping from a road onto a Quay uses a full move point: the time needed\
 to load up and use its infrastructure. Any unit already on a Quay can immediately\
 step onto connecting roads at no penalty. (Cargo units must first be unloaded by\
 the transport carrying them.) A quay can equally be placed on a canal and will\
 behave the same as on a river.\
"), _("
TIP: Quays can boost transportational logistics for ancient civilisations who have\
 built on rivers. Don't be tempted to make too many Quays. The unloading and movement\
 bonus is often the extra edge an enemy needs for an effective surprise attack.\ 
"), _("Moves needed to cross a river to a tile on the other side:\n
⁶⁄₃ moves: No infrastructure.\n\
⁴⁄₃ moves: Quay connected to roads.\n\
2⁄₃ moves: Bridge connected to roads.\n\
")

[extra_road]
name           = _("Road")
category       = "Infra"
causes         = "Road"
rmcauses       = "Pillage"
graphic        = "road.road"
graphic_alt    = "-"
activity_gfx   = "unit.road"
act_gfx_alt    = "-"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
reqs           =
    { "type", "name", "range"
      "UnitFlag", "CanRoad", "Local"
      "TerrainClass", "Land", "Local"
    }
build_time     = 0
removal_time   = 0
native_to      = "Land", "LandNoKill", "LandAirSea", "LandRoad"
hidden_by      = "Railroad", "Maglev", "Naval Base"
flags          = "AutoOnCityCenter", "NativeTile", "Railable"
bridged_over   = "River"
helptext       = _("\
Roads allow your land units to move more quickly, and on some terrain,\
 also provide a trade bonus.\
"), _("\
Building roads on river tiles requires knowledge of Bridge Building.\
 City center tiles automatically get roads (unless they are on a river\
 tile and you do not yet know Bridge Building).\
")

[extra_railroad]
name           = _("Railroad")
category       = "Infra"
causes         = "Road"
rmcauses       = "Pillage"
graphic        = "road.rail"
graphic_alt    = "-"
activity_gfx   = "unit.rail"
act_gfx_alt    = "unit.road"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
reqs           =
    { "type", "name", "range"
      "Tech",      "Railroad", "Player"
      "ExtraFlag", "Railable", "Local"
      "UnitFlag",  "CanRoad",  "Local"
;     "TerrainClass", "Land", "Local" ;if there's a railable extra that's all we need: cf. Sea Bridge.
    }
build_time     = 3
removal_time   = 0
native_to      = "Land", "LandNoKill", "LandAirSea", "LandRail"
hidden_by      = "Maglev", "Naval Base"
flags          = "AutoOnCityCenter", "NativeTile"
bridged_over   = "River"
helptext       = _("\
Once you learn Railroad technology, you may upgrade your roads to\
 railroads. Units travel three times faster along railroads than\
 along roads.\
"), _("\
A railroad also increases any shield resources produced by a tile.\
 A tile whose road is upgraded to a railroad retains any trade bonus\
 from the road as well.\
"), _("\
City center tiles with roads are automatically upgraded to railroads\
 when you learn the Railroad technology.\
")

[extra_maglev]
name           = _("Maglev")
category       = "Infra"
causes         = "Road"
rmcauses       = "Pillage"
graphic        = "road.maglev"
graphic_alt    = "road.rail"
activity_gfx   = "unit.maglev"
act_gfx_alt    = "unit.road"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
reqs           =
    { "type", "name", "range", "present", "quiet"
      "Tech", "Superconductors", "Player", TRUE, FALSE
;      "Extra", "Railroad", "Local", TRUE, FALSE           
      "UnitFlag", "CanRoad", "Local", TRUE, FALSE        
;      "UnitClass", "Sea", "Local", FALSE, TRUE
;      "TerrainClass", "Land", "Local", TRUE, FALSE
    }
build_time     = 3
removal_time   = 0
native_to      = "Land", "LandNoKill", "LandAirSea", "LandRail"
hidden_by      = "Naval Base"
flags          = "NativeTile", "AutoOnCityCenter"
helptext       = _("\
With Superconductors, you may build MAGnetic LEVitation tracks\
 on tiles. Land units expend no movement points\
 when riding a MagLev; you may ride indefinitely.\
"), _("\
City center tiles with railroads are automatically upgraded to MagLev\
 when you learn about Superconductors.\
")

[extra_river]
name           = _("River")
category       = "Infra" ;TEST for well-digger
causes         = "Road"
;rmcauses       = ""
graphic        = "road.river"
graphic_alt    = "-"
activity_gfx   = "unit.canal"
act_gfx_alt    = "unit.oil_mine"
act_gfx_alt2   = "unit.road"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
buildable      = TRUE
generated      = TRUE
defense_bonus  = 33
reqs           =
    { "type", "name", "range", "present"
      "TerrainClass", "Land", "Local", TRUE
      "Tech", "Pottery", "Player", FALSE
      "Tech", "Alphabet","Player", FALSE
      "Tech", "Writing", "World",  FALSE
      "UnitFlag", "Well-Digger", "Local", TRUE
      "Age",      "10",          "Local", FALSE
    }
build_time = 2
removal_time = 0
flags          = "NativeTile", "Quayable", "IrrigationSource", "WaterwaySource"
native_to      = "Land", "LandNoKill", "LandAirSea", "Trireme", "RiverShip"
helptext       = _("\
Any land terrain type may have a River on it.  A River adds 1\
 trade to the resources produced by that tile.  It also increases the tile\
 defense factor by 50%.  Finally, land units may move along a River (but\
 not diagonally) for fast travel.\
"), _("\
Roads, railroads and MagLev can only be built on River tiles if your\
 civilization has learned Bridge Building technology.\
")

[extra_sea_bridge]
name           = _("Sea Bridge")
category       = "Infra"
causes         = "Road"
rmcauses       = "Pillage"
graphic        = "road.sea_bridge"
graphic_alt    = "road.road"
activity_gfx   = "unit.airstrip"
act_gfx_alt    = "unit.road"
act_gfx_alt2   = "unit.airstrip"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
generated      = FALSE
reqs           =
    { "type", "name", "range", "present"
      "TerrainClass", "Oceanic", "Local", TRUE
      "TerrainClass", "Land", "CAdjacent", TRUE
      "Tech", "Steel", "Player", TRUE
      "UnitFlag", "CanRoad", "Local", TRUE
    }
build_time     = 12
removal_time   = 0
native_to      = "Land", "LandNoKill", "LandAirSea", "LandRoad"
flags          = "NativeTile", "Railable"
helptext          = _("\
Sea Bridges are engineering marvels which span lakes and seas to connect them for \
land traffic. They must be built cardinally adjacent to land.\
")

[extra_canal]
name           = _("Canal")
category       = "Infra"
causes         = "Road"
rmcauses       = "Pillage"
graphic        = "road.canal"
graphic_alt    = "road.river"
activity_gfx   = "unit.canal"
act_gfx_alt    = "unit.convert"
act_gfx_alt2   = "unit.airstrip"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
generated      = FALSE
reqs           =
    { "type", "name", "range", "present"
      "TerrainFlag", "Low Land", "Local", TRUE
      "TerrainClass", "Oceanic", "CAdjacent", TRUE
      "Tech", "Engineering", "Player", TRUE
      "UnitFlag", "CanRoad", "Local", TRUE
    }
build_time     = 10
removal_time   = 0
native_to      = "Trireme", "Sea", "RiverShip", "Land", "LandAirSea", "LandNoKill", "Helicopter", "Submarine"
flags          = "NativeTile", "Quayable", "IrrigationSource", "WaterwaySource"
helptext          = _("\
Canals allow ships to travel through land tiles. Canals can be built on \
low land tiles only, and not far inland.\
")
[extra_canal2]
name           = _("Waterway")
category       = "Infra"
causes         = "Road"
rmcauses       = "Pillage"
graphic        = "road.canal"
graphic_alt    = "road.river"
activity_gfx   = "unit.canal"
act_gfx_alt    = "unit.convert"
act_gfx_alt2   = "unit.airstrip"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
generated      = FALSE
reqs           =
    { "type", "name", "range", "present"
      "TerrainFlag", "Low Land", "Local", TRUE
      "ExtraFlag", "WaterwaySource", "CAdjacent", TRUE
      "Tech", "Engineering", "Player", TRUE
      "UnitFlag", "CanRoad", "Local", TRUE
    }
build_time     = 10
removal_time   = 0
native_to      = "Trireme", "Sea", "RiverShip", "Land", "LandAirSea", "LandNoKill", "Helicopter", "Submarine"
flags          = "NativeTile", "Quayable", "IrrigationSource", "AutoOnCityCenter"
helptext          = _("\
Waterways are navigational channels that connect canals with rivers. Essentially, they're the same as canals.\
")

[extra_gold]
name           = _("Gold")
category       = "Resource"
causes         = "Resource"
;rmcauses       = ""
graphic        = "ts.gold"
graphic_alt    = "-"
activity_gfx   = "None"
act_gfx_alt    = "-"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"

[extra_iron]
name           = _("Iron")
category       = "Resource"
causes         = "Resource", "Appear"
;rmcauses       = ""
graphic        = "ts.iron"
graphic_alt    = "-"
activity_gfx   = "None"
act_gfx_alt    = "-"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
;Resource distribution scripting to add more resources in leaner
;regions. Adds about +40 to specials, so adjust settings accordingly
appearance_chance = 1000   ; +10% if no adjacent resource
appearance_reqs = 
    { "type",    "name",     "range",   "present"
      "Terrain", "Mountains","Local",    TRUE
      "MinYear", "-4000",    "World",    TRUE
      "MinYear", "-3900",    "World",    FALSE
      "Extra",   "Gold",     "Adjacent", FALSE
      "Extra",   "Iron",     "Adjacent", FALSE
      "Extra",   "Coal",     "Adjacent", FALSE
      "Extra",   "Wine",     "Adjacent", FALSE
    }

[extra_elk]
name           = _("Elk")
category       = "Resource"
causes         = "Resource", "Appear"
;rmcauses       = ""
graphic        = "ts.tundra_game"
graphic_alt    = "-"
activity_gfx   = "None"
act_gfx_alt    = "-"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
;Resource distribution scripting to add more resources in leaner
;regions. Adds about +40 to specials, so adjust settings accordingly
appearance_chance = 1100   ; +11% if no adjacent resource
appearance_reqs = 
    { "type",    "name",     "range",   "present"
      "Terrain", "Tundra",   "Local",    TRUE
      "MinYear", "-4000",    "World",    TRUE
      "MinYear", "-3900",    "World",    FALSE
      "Extra",   "Elk",      "Adjacent", FALSE
      "Extra",   "Furs",     "Adjacent", FALSE
      "Extra",   "Buffalo",  "Adjacent", FALSE
      "Extra",   "Wheat",    "Adjacent", FALSE
      "Extra",   "Pheasant", "Adjacent", FALSE
    }

[extra_furs]
name           = _("Furs")
category       = "Resource"
causes         = "Resource", "Appear"
;rmcauses       = ""
graphic        = "ts.furs"
graphic_alt    = "-"
activity_gfx   = "None"
act_gfx_alt    = "-"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
;Resource distribution scripting to add more resources in leaner
;regions. Adds about +40 to specials, so adjust settings accordingly
appearance_chance = 900   ; +9% if no adjacent resource
appearance_reqs = 
    { "type",    "name",     "range",   "present"
      ;"Terrain", "Tundra",   "Local",    TRUE
      "Terrain", "Grassland","Local",    FALSE 
      "Terrain", "Desert",   "Local",    FALSE
      "Terrain", "Mountains","Local",    FALSE
      "Terrain", "Hills",    "Local",    FALSE
      "Terrain", "Forest",   "Local",    FALSE
      "Terrain", "Jungle",   "Local",    FALSE
      "Terrain", "Swamp",    "Local",    FALSE
      "Terrain", "Plains",   "Local",    FALSE 
      "TerrainClass","Oceanic","Local",  FALSE
      "MinYear", "-4000",    "World",    TRUE
      "MinYear", "-3900",    "World",    FALSE
      "Extra",   "Elk",      "Adjacent", FALSE
      "Extra",   "Furs",     "Adjacent", FALSE
      "Extra",   "Silk",     "Adjacent", FALSE
      "Extra",   "Pheasant", "Adjacent", FALSE
    }

[extra_coal]
name           = _("Coal")
category       = "Resource"
causes         = "Resource"
;rmcauses       = ""
graphic        = "ts.coal"
graphic_alt    = "-"
activity_gfx   = "None"
act_gfx_alt    = "-"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"

[extra_fish]
name           = _("Fish")
category       = "Resource"
causes         = "Resource"
;rmcauses       = ""
graphic        = "ts.fish"
graphic_alt    = "-"
activity_gfx   = "None"
act_gfx_alt    = "-"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"

[extra_fruit]
name           = _("Fruit")
category       = "Resource"
causes         = "Resource"
;rmcauses       = ""
graphic        = "ts.fruit"
graphic_alt    = "-"
activity_gfx   = "None"
act_gfx_alt    = "-"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"

[extra_gems]
name           = _("Gems")
category       = "Resource"
causes         = "Resource", "Appear"
;rmcauses       = ""
graphic        = "ts.gems"
graphic_alt    = "-"
activity_gfx   = "None"
act_gfx_alt    = "-"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
;Resource distribution scripting to add more resources in leaner
;regions. Adds about +40 to specials, so adjust settings accordingly
appearance_chance = 200   ; +2% if no adjacent resource
appearance_reqs = 
    { "type",    "name",     "range",   "present"
      "Terrain", "Jungle",   "Local",    TRUE
      "MinYear", "-4000",    "World",    TRUE
      "MinYear", "-3900",    "World",    FALSE
      "Extra",   "Rubber",   "Adjacent", FALSE
      "Extra",   "Fruit",    "Adjacent", FALSE
      "Extra",   "Gems",     "Adjacent", FALSE
      "Extra",   "Wine",     "Adjacent", FALSE
      "Extra",   "Silk",     "Adjacent", FALSE
    }

[extra_rubber]
name           = _("Rubber")
category       = "Resource"
causes         = "Resource", "Appear"
;rmcauses       = ""
graphic        = "ts.rubber"
graphic_alt    = "ts.peat"
activity_gfx   = "None"
act_gfx_alt    = "-"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
;Resource distribution scripting to add more resources in leaner
;regions. Adds about +40 to specials, so adjust settings accordingly
appearance_chance = 300   ; +3% if no adjacent resource
appearance_reqs = 
    { "type",    "name",     "range",   "present"
      "Terrain", "Jungle",   "Local",    TRUE
      "MinYear", "-4000",    "World",    TRUE
      "MinYear", "-3900",    "World",    FALSE
      "Extra",   "Rubber",   "Adjacent", FALSE
      "Extra",   "Fruit",    "Adjacent", FALSE
      "Extra",   "Gems",     "Adjacent", FALSE
      "Extra",   "Resources","Adjacent", FALSE
    }

[extra_buffalo]
name           = _("Buffalo")
category       = "Resource"
causes         = "Resource"
;rmcauses       = ""
graphic        = "ts.buffalo"
graphic_alt    = "-"
activity_gfx   = "None"
act_gfx_alt    = "-"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"

[extra_wheat]
name           = _("Wheat")
category       = "Resource"
causes         = "Resource"
;rmcauses       = ""
graphic        = "ts.wheat"
graphic_alt    = "-"
activity_gfx   = "None"
act_gfx_alt    = "-"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"

[extra_oasis]
name           = _("Oasis")
category       = "Resource"
causes         = "Resource", "Appear"
;rmcauses       = ""
graphic        = "ts.oasis"
graphic_alt    = "-"
activity_gfx   = "None"
act_gfx_alt    = "-"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
flags          = "IrrigationSource"
;Resource distribution scripting to add more resources in leaner
;regions. Adds about +40 to specials, so adjust settings accordingly
appearance_chance = 400   ; +4% if no adjacent resource
appearance_reqs = 
    { "type",    "name",     "range",   "present"
      "Terrain", "Desert",   "Local",    TRUE
      "MinYear", "-4000",    "World",    TRUE
      "MinYear", "-3900",    "World",    FALSE
      "Extra",   "Oasis",    "Adjacent", FALSE
      "Extra",   "Oil",      "Adjacent", FALSE
      "Extra",   "Wheat",    "Adjacent", FALSE
      "Extra",   "Fruit",    "Adjacent", FALSE
    }

[extra_peat]
name           = _("Peat")
category       = "Resource"
causes         = "Resource", "Appear"
;rmcauses       = ""
graphic        = "ts.peat"
graphic_alt    = "-"
activity_gfx   = "None"
act_gfx_alt    = "-"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
;Resource distribution scripting to add more resources in leaner
;regions. Adds about +40 to specials, so adjust settings accordingly
appearance_chance = 2280   ; +22.8% if no adjacent resource
appearance_reqs = 
    { "type",    "name",     "range",   "present"
      "Terrain", "Swamp",    "Local",    TRUE
      "MinYear", "-4000",    "World",    TRUE
      "MinYear", "-3900",    "World",    FALSE
      "Extra",   "Spice",    "Adjacent", FALSE
      "Extra",   "Peat",     "Adjacent", FALSE
      "Extra",   "Resources","Adjacent", FALSE
    }

[extra_pheasant]
name           = _("Pheasant")
category       = "Resource"
causes         = "Resource"
;rmcauses       = ""
graphic        = "ts.pheasant"
graphic_alt    = "-"
activity_gfx   = "None"
act_gfx_alt    = "-"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"

[extra_bonus]
name           = _("Resources")
category       = "Resource"
causes         = "Resource"
;rmcauses       = ""
graphic        = "ts.grassland_resources"
graphic_alt    = "-"
activity_gfx   = "None"
act_gfx_alt    = "-"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"

[extra_ivory]
name           = _("Ivory")
category       = "Resource"
causes         = "Resource", "Appear"
;rmcauses       = ""
graphic        = "ts.arctic_ivory"
graphic_alt    = "-"
activity_gfx   = "None"
act_gfx_alt    = "-"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
;Resource distribution scripting to add more resources in leaner
;regions. Adds about +40 to specials, so adjust settings accordingly
appearance_chance       = 4500  ;+45%
appearance_reqs = 
    { "type",    "name",     "range",   "present"
      "Terrain", "Glacier",   "Local",    TRUE
      "TerrainClass","Oceanic","Adjacent",TRUE
      "MinYear", "-4000",    "World",    TRUE
      "MinYear", "-3900",    "World",    FALSE
      "Extra",   "Ivory",    "CAdjacent",FALSE
    }

[extra_silk]
name           = _("Silk")
category       = "Resource"
causes         = "Resource"
;rmcauses       = ""
graphic        = "ts.silk"
graphic_alt    = "-"
activity_gfx   = "None"
act_gfx_alt    = "-"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"

[extra_spice]
name           = _("Spice")
category       = "Resource"
causes         = "Resource", "Appear"
;rmcauses       = ""
graphic        = "ts.spice"
graphic_alt    = "-"
activity_gfx   = "None"
act_gfx_alt    = "-"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
;Resource distribution scripting to add more resources in leaner
;regions. Adds about +40 to specials, so adjust settings accordingly
appearance_chance = 2420 ;+24.2% extra chance if non-adjacent extra 
appearance_reqs = 
    { "type",    "name",     "range",   "present"
      "Terrain", "Swamp",    "Local",    TRUE
      "MinYear", "-4000",    "World",    TRUE
      "MinYear", "-3900",    "World",    FALSE
      "Extra",   "Spice",    "Adjacent", FALSE
      "Extra",   "Peat",     "Adjacent", FALSE
      "Extra",   "Resources","Adjacent", FALSE
    }

[extra_whales]
name           = _("Whales")
category       = "Resource"
causes         = "Resource"
;rmcauses       = ""
graphic        = "ts.whales"
graphic_alt    = "-"
activity_gfx   = "None"
act_gfx_alt    = "-"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"

[extra_wine]
name           = _("Wine")
category       = "Resource"
causes         = "Resource"
;rmcauses       = ""
graphic        = "ts.wine"
graphic_alt    = "-"
activity_gfx   = "None"
act_gfx_alt    = "-"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"

[extra_oil]
name           = _("Oil")
category       = "Resource"
causes         = "Resource";, "Appear"
;rmcauses       = ""
graphic        = "ts.oil"
graphic_alt    = "-"
act_gfx_alt2   = "-"
activity_gfx   = "None"
act_gfx_alt    = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
;Resource distribution scripting to add more resources in leaner
;regions. Adds about +40 to specials, so adjust settings accordingly
;appearance_chance       = 0    ;55% no longer appears because too many permutations for layered bonuses not working.
;appearance_reqs = 
;    { "type",    "name",     "range",   "present"
;      "Terrain", "Glacier",   "Local",    TRUE
;      "TerrainClass","Oceanic","Adjacent",FALSE
;      "MinYear", "-4000",    "World",    TRUE
;      "MinYear", "-3900",    "World",    FALSE
;      "Extra",   "Oil",      "CAdjacent",FALSE
;    }

[extra_berries]
name           = _("Berries")
category       = "Resource"
causes         = "Resource", "Appear"
;rmcauses       = ""
graphic        = "ts.berries"
graphic_alt    = "ts.gold"
activity_gfx   = "None"
act_gfx_alt    = "-"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
;Resource distribution scripting to add more resources in leaner
;regions. Adds about +40 to specials, so adjust settings accordingly
appearance_chance = 700   ; +7% iff no adjacent rivers or resources i.e., far less than 4%
appearance_reqs = 
    { "type",    "name",     "range",   "present"
      "Terrain", "Forest",   "Local",    TRUE
      "MinYear", "-4000",    "World",    TRUE
      "MinYear", "-3900",    "World",    FALSE
      "Extra",   "Berries",  "Adjacent", FALSE
      "Extra",   "Pheasant", "Adjacent", FALSE
      "Extra",   "Wheat",    "Adjacent", FALSE
      "Extra",   "Buffalo",  "Adjacent", FALSE
      "Extra",   "Resources","Adjacent", FALSE
      "Extra",   "Fruit",    "Adjacent", FALSE
      "Extra",   "Silk",     "Adjacent", FALSE
      "Extra",   "River",    "Local",    FALSE ;Forests need help to have less non-trade tiles
    }

; ************ WANDERING WILD ANIMAL RESOURCES ************************
[extra_deer]
name           = _("Deer")
category       = "Resource"
causes         = "Appear", "Resource"
rmcauses       = "Disappear"
graphic        = "ts.forest_game"
graphic_alt    = "-"
activity_gfx   = "None"
act_gfx_alt    = "-"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
disappearance_chance    = 10000
disappearance_reqs = 
    { "type",           "name", "range"
    }
appearance_chance       = 360
appearance_reqs = 
    { "type",    "name", "range",  "present"
      "Terrain", "Grassland","Local", TRUE
      "MinYear", "-2500", "World", FALSE
      "Extra", "Deer", "Adjacent", FALSE
    }

[extra_wild_boar]
name           = _("Wild Boar")
category       = "Resource"
causes         = "Appear", "Resource"
rmcauses       = "Disappear"
graphic        = "ts.boar"
graphic_alt    = "-"
activity_gfx   = "None"
act_gfx_alt    = "-"
act_gfx_alt2   = "-"
rmact_gfx      = "None"
rmact_gfx_alt  = "-"
disappearance_chance    = 10000
disappearance_reqs = 
    { "type",           "name", "range"
    }
appearance_chance       = 360
appearance_reqs = 
    { "type",    "name", "range",  "present"
      "Terrain", "Forest","Local", TRUE
      "MinYear", "-2500", "World", FALSE
      "Extra", "Wild Boar", "Adjacent", FALSE
    }


; /* <-- avoid gettext warnings
;
; Base types:
;
; extra                   = name of the extra this base section is part of
;                           (must have "Base" in its causes)
; gui_type                = How gui should handle this base.
;                           Value can be "Fortress", "Airbase", or "Other"
; border_sq               = Base will claim land ownership up to this radius,
;                           -1 to disable. If enabled, base cannot exist in city tile.
; vision_main_sq          = Base will have main layer vision to this radius
; vision_invis_sq         = Base will have invisible layer vision to this radius
; vision_subs_sq          = Base will have subsurface layer vision to this radius
; flags
;   - "NoAggressive"      = Units inside are not considered aggressive if there`s
;                           friendly city within 3 tiles
;
; */ <-- avoid gettext warnings

[base_hideout]
extra          = "Hideout"
gui_type       = "Other"
border_sq      = -1
vision_main_sq = 2

[base_fort]
extra          = "Fort"
gui_type       = "Fortress"
border_sq      = -1
vision_main_sq = 4

[base_fortress]
extra          = "Fortress"
gui_type       = "Fortress"
border_sq      = 4
vision_main_sq = 4
flags          = "NoAggressive"

[base_castle]
extra          = "Castle"
gui_type       = "Fortress"
border_sq      = 5
vision_main_sq = 15
flags          = "NoAggressive"

[base_bunker]
extra          = "Bunker"
gui_type       = "Fortress"
border_sq      = 4
vision_main_sq = 4
flags          = "NoAggressive"

[base_airbase]
extra          = "Airbase"
gui_type       = "Airbase"

[base_radar]
extra          = "Radar"
gui_type       = "Airbase"
vision_main_sq = 30

[base_buoy]
extra          = "Buoy"
gui_type       = "Fortress"
vision_main_sq = 5

[base_navalbase]
extra          = "Naval Base"
gui_type       = "Fortress"
border_sq      = 3    ;this may be causing the nationality flip behaviour for allies co-occupying
vision_main_sq = 6
vision_subs_sq = 4
flags          = "NoAggressive"


; /* <-- avoid gettext warnings
;
; Road types:
;
; extra                   = name of the extra this road section is part of
;                           (must have "Road" in its causes)
; first_reqs              = additional requirements to build the first part of
;                           the road, when none of the adjacent tiles have any
;                           integrating roads (see effects.ruleset and
;                           README.effects for help on requirements)
; move_cost               = how much movement it takes to travel
;                           via this road (in fractional move points, as
;                           defined by move_fragments)
;                           -1 means that road provides no speed bonus.
; move_mode               = how movement costs are applied
;   - "Cardinal"   = Road cost applies only on cardinal moves
;   - "Relaxed"    = Road cost is normal for cardinal, double for diagonal moves
;   - "FastAlways" = Road cost applies always between two tiles with the roads
;                    (default)
; food_incr_const         = food production added to tile regardless of terrain
; shield_incr_const       = shield production added to tile regardless of
;                           terrain
; trade_incr_const        = trade production added to tile regardless of
;                           terrain
; food_incr               = food production added to tile; multiplied by
;                           terrain-specific road_food_incr_pct
; shield_incr             = shield production added to tile; multiplied by
;                           terrain-specific road_shield_incr_pct
; trade_incr              = trade production added to tile; multiplied by
;                           terrain-specific road_trade_incr_pct
; food_bonus              = percent added to food production
; shield_bonus            = percent added to shield production
; trade_bonus             = percent added to trade production
;   In summary, output bonuses from roads are given by the formula:
;   (base_prod + roads.incr_const + roads.incr*terrain.incr_pct) * roads.bonus
; compat_special          = what kind of pre-2.5 special this road corresponds
;                           to, if any: "Road", "Railroad", "River", or "None".
;                           Used for UI and loading old savegames
; integrates              = list of road types that are suitable next steps
;                           for travel from this road type
; flags
;   - "River"             = Automatically generated by map generator, always
;                           flowing from land tiles to ocean
;   - "UnrestrictedInfra" = Use of the enemy owned road is not restricted
;                           even if server setting 'restrictinfra' is set
;   - "JumpFrom"          = Move to a tile nativity providing "JumpTo"
;                           road is considered native
;   - "JumpTo"            = Move from a tile nativity providing "JumpFrom"
;                           road is considered native
;
; */ <-- avoid gettext warnings

[road_road]
extra          = "Road"
move_cost      = 3
food_incr      = 0
shield_incr    = 0
trade_incr     = 1
food_bonus     = 0
shield_bonus   = 0
trade_bonus    = 0
integrates     = "Quay", "Sea Bridge"
compat_special = "Road"
flags          = "UnrestrictedInfra"

[road_quay]
extra          = "Quay"
move_cost      = 9
food_incr      = 0
shield_incr    = 0
trade_incr     = 0
food_bonus     = 0
shield_bonus   = 0
trade_bonus    = 0
integrates     = "Road"
flags          = "UnrestrictedInfra"

[road_railroad]
extra          = "Railroad"
move_cost      = 1
food_incr      = 0
shield_incr    = 0
trade_incr     = 0
food_bonus     = 0
shield_bonus   = 50
trade_bonus    = 0
integrates     = "Sea Bridge"
compat_special = "Railroad"

[road_maglev]
extra          = "Maglev"
move_cost      = 0
food_incr      = 0
shield_incr    = 0
trade_incr     = 0
food_bonus     = 0
shield_bonus   = 0
trade_bonus    = 0

[road_river]
extra          = "River"
move_cost      = 3
move_mode      = "Cardinal"
trade_incr_const = 1
compat_special = "River"
integrates     = "Canal", "Waterway"
flags          = "River", "UnrestrictedInfra"

[road_sea_bridge]
extra          = "Sea Bridge"
move_cost      = 3
move_mode      = "Cardinal"
trade_incr     = 0
food_bonus     = 0
shield_bonus   = 0
trade_bonus    = 0
integrates     = "Road", "Railroad"
flags          = "UnrestrictedInfra"

[road_canal]
extra             = "Canal"
move_cost         = 9
move_mode         = "Cardinal"
integrates        = "River", "Waterway"
compat_special    = "None"

[road_waterway]
extra             = "Waterway"
move_cost         = 9
move_mode         = "Cardinal"
integrates        = "River", "Canal"
compat_special    = "None"
